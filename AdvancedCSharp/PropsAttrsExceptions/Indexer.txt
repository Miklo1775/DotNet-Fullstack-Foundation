Indexers

--What is an Indexer?
> An Indexer allows an object to be indexed such as an array.
> When you define an indexer for a class, this class behaves similar to a virtual array.
> You can access the instance of this class using the array access operator {[]}.
> Example(One dimensional indexer):
	****
			element-type this[int index]{
				get{
					//return value specified by index.
				}

				set{
					//set the value specified by the index.
				}
			}
	****

--Indexers vs Properties
> Indexers:
	*Created with this keyword.
	*Identified by signature.
	*Accessed using indexes.
	*Instance member, so can't be static.
	*Get accessor has the same formal parameter list as the indexer.
	*Set accessor has the same formal parameter list as the indexer, in addition to the value parameter.

> Properties: 
	*Properties don't require this keyword.
	*Identified by their names.
	*Accessed by their names.
	*Can be static as well as instance members.
	*Get accessor of a property has no parameters.
	*Set accessor of a property contains implicit value parameter.